#Member&Team /N:1연관관계 맵핑에서 JPA DATA 쿼리 날리는거 확인할때 연관관계 주인이 아닌 TEAM에는 쿼리가 날라가지 않으며 member13.getTeam()를 통해 확인할수 있다
# 이것을 해결하기 위해 changeTeam에서 team.getMembers().add(this); 이부분이 중요하게 된다 getTeam을 하고 flush,close를 하여 영속성컨테이너를 db에 저장및 비워주면 정상적으로 데이터가 들어간 것을 확인할수 있다.! 유레카! ㅋㅋ.
#Member
@Entity
@Getter
@Setter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@ToString(of = {"id","username","age"})
public class Member {

    @Id @GeneratedValue //제너레이트벨류 쓰면 jpa가 시퀀스로 자동으로 번호매겨줌 id는 식별자
    @Column(name = "member_id")
    private Long id;
    private String username;
    private int age;


    @ManyToOne
    @JoinColumn(name = "team_id")   //외래키
    private Team team;



   /* protected Member() {@NoArgsConstructor(access = AccessLevel.PROTECTED)같은 기능
       private로 하면 안됨 기본 none 생성자는
    }*/

    public Member(String username) {
        this.username = username;
    }

    public Member(String username, int age, Team teamA) {
        this.username = username;
        this.age = age;
        if(team != null){
            changeTeam(team);
        }
    }

    public void changeTeam(Team team){
        this.team = team;
        team.getMembers().add(this);
    }

    /*public void changeUsername(String username){
        this.username = username;
    }*/
}

#Team

@Entity
@Getter
@Setter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@ToString(of = {"id","name"})
public class Team {

    @Id
    @GeneratedValue
    @Column(name = "team_id")
    private Long id;
    private String name;


    @OneToMany(mappedBy = "team")
    private List<Member> members = new ArrayList<>();

    public Team(String name) {
        this.name = name;
    }
}

#tdd
@Test
    public void chodong() throws Exception{
        //given
        Team teamQ = new Team("teamqq");
        Team D = new Team("q");
        em.persist(teamQ);
        em.persist(D);
        Member member13 = new Member("AA", 10, teamQ);
        em.persist(member13);

        System.out.println("=======================");
        member13.changeTeam(D);
        System.out.println("=======================");
        System.out.println("member13 = " + member13.getTeam());
//        member13.changeTeam(D);
        em.flush();
        em.clear();
        System.out.println("=======================");
//        member13.changeTeam(D);


        System.out.println("=======================");
        System.out.println("member13 = " + member13.getTeam());
        System.out.println("=======================");


        //when

        //then
    }
