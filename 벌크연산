@Modifying //(clearAutomatically = true) 혹은 해당기능을 사용하면 영속성컨텍스트를 지워준다!       
@Query("update Member m set m.age = m.age +1 where m.age >= :age")
int bulkAgePlus(@Param("age")int age);


public int bulkAgePlus(int age){
        return em.createQuery("update Member m set m.age = m.age+1 " +
                "where m.age>=:age")
                .setParameter("age", age)
                .executeUpdate();

    }



  @Test
    public void bulkUpdate() throws Exception{
        //given
        memberRepository.save(new Member("member1", 10));
        memberRepository.save(new Member("member2", 19));
        memberRepository.save(new Member("member3", 20));
        memberRepository.save(new Member("member4", 21));
        memberRepository.save(new Member("member5", 40));

        //when /bulk를 사용하면 영속성 컨텍스트에 저장되는 것을 건너띄우고 db에 강제로 저장하는 느낌
        int resultCount = memberRepository.bulkAgePlus(20);
        em.flush(); 
        // 영속성데이터가 변경시에 db에 변경감지를 통해 update를 해주는데 실제로 벌크는 컨텍스트에 영향을 주지 않앗기에
        //update가 되지않아 컨텍스트에 저장된40의 값이 저장되지 않음
        
        //2021.6.20 
        //즉 벌크연산은 db에만 영향을 주고 영속성컨텍스트에는 변경이 없기에 변경감지기능이 작동하지 않아 영속성컨텍스트의 값이 변한게 없다고 프로그램이 인지해서
        //db로 flush(변경된 데이터값 전송)하지 않음(벌크에 의한 변경으로 실제 인지하기엔 변경된점이 없기 때문에) 그로인해 db에는 20살 이상의 모든값이 +1되어 저장
        
        em.clear(); // 영속성 컨텍스트를 비워줌

        List<Member> result = memberRepository.findByUsername("member5");
        Member member5 = result.get(0);
        //영속성컨테이너에는 member5가 40살로 저장되어 있으나 실제 벌크를 앞에 하여서 41살로 db에 저장되어있음
}
